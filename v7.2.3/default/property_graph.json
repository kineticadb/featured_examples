{
  "workbook": {
    "metadata": {
      "revision": 20240506,
      "example_id": "f35fa5be-bded-4d6d-a49e-02aab1af5c07",
      "features": ["Graph"],
      "approx_time": "15 mins",
      "thumbnail": "https://kinetica-workbench.s3.amazonaws.com/workbooks/examples/property_graph.png"
    },
    "config": {},
    "id": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710",
    "name": "Property Graph",
    "description": "Property graph examples with Kinetica Graph.  Showcases the versatile uses of Kinetica's Graph engine.",
    "user_id": "49344c10-5960-11ed-ad80-d71e18e85c4e",
    "warehouse_id": null,
    "is_example": true,
    "is_shared": false,
    "created_at": "2024-04-26T14:17:01.759Z",
    "updated_at": "2024-05-06T22:07:52.217Z"
  },
  "worksheets": [
    {
      "config": {
        "chat_messages": []
      },
      "id": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
      "name": "London Tube",
      "description": "Demonstrates the use of query pattern matching and how embedded queries with OLAP functions can we run together.",
      "previous_worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
      "next_worksheet_id": null,
      "workbook_id": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710",
      "created_at": "2024-04-26T14:17:01.815Z",
      "updated_at": "2024-05-06T22:07:05.319Z",
      "workbookId": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710"
    },
    {
      "config": {
        "chat_messages": []
      },
      "id": "4589a130-062c-11ef-95c9-a11f8aa13710",
      "name": "Wiki",
      "description": "A demonstration of how labels are associated with the graph entities and how typical hop based pattern queries can be run. ",
      "previous_worksheet_id": null,
      "next_worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
      "workbook_id": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710",
      "created_at": "2024-04-29T13:27:48.675Z",
      "updated_at": "2024-05-06T22:07:52.202Z",
      "workbookId": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710"
    },
    {
      "config": {
        "chat_messages": []
      },
      "id": "155e0440-062e-11ef-95c9-a11f8aa13710",
      "name": "IMDB",
      "description": "Demonstration of Property Graphs with fuzzy input to queries.",
      "previous_worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
      "next_worksheet_id": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
      "workbook_id": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710",
      "created_at": "2024-04-29T13:40:46.852Z",
      "updated_at": "2024-05-06T22:07:08.778Z",
      "workbookId": "3a6ca0e0-062c-11ef-95c9-a11f8aa13710"
    }
  ],
  "blockMap": {
    "3a6dd960-062c-11ef-95c9-a11f8aa13710": [
      {
        "config": {},
        "id": "3a6f11e0-062c-11ef-95c9-a11f8aa13710",
        "name": "Block 1",
        "description": "Description for Block 1",
        "content": "\"-- Depart times at stations stops for London tube\\nCREATE or REPLACE TABLE stops(name TEXT, departs TIME);\\nINSERT INTO stops VALUES('Stop1','11:45');\\nINSERT INTO stops VALUES('Stop2','11:37');\\nINSERT INTO stops VALUES('Stop3','11:33');\\nINSERT INTO stops VALUES('Stop4','11:44');\\nINSERT INTO stops VALUES('Stop5','11:47');\\nINSERT INTO stops VALUES('Stop6','11:55');\\nINSERT INTO stops VALUES('Stop7','11:44');\\nINSERT INTO stops VALUES('Stop8','11:40');\\nINSERT INTO stops VALUES('Stop9','11:54');\\n\"",
        "previous_block_id": "3a73ccd0-062c-11ef-95c9-a11f8aa13710",
        "next_block_id": "3a707170-062c-11ef-95c9-a11f8aa13710",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-26T14:17:01.884Z",
        "updated_at": "2024-05-06T21:57:26.351Z",
        "worksheetId": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "3a707170-062c-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- London Subway Graph (portions) with transfer nodes depicted as Stops\\nCREATE OR REPLACE directed GRAPH tube (\\n    NODES => INPUT_TABLES(\\n                \\n        (SELECT 'Pecham Rye' AS NAME, 'STATION' AS LABEL),\\n        (SELECT 'Denmark Hill' AS NAME, 'STATION' AS LABEL),\\n        (SELECT 'London Victoria' AS NAME, 'STATION' AS LABEL),\\n        (SELECT 'Elephant & Castle' AS NAME, 'STATION' AS LABEL),\\n        (SELECT 'Clapham High Street' AS NAME, 'STATION' AS LABEL),\\n        (SELECT name AS NAME, 'STOP' AS LABEL FROM stops)\\n    ),\\n    EDGES => INPUT_TABLES(        \\n\\n        (SELECT 'Stop1' AS NODE1_NAME, 'Clapham High Street' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Clapham High Street' AS NODE1_NAME, 'Stop1' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop2' AS NODE1_NAME, 'Stop1' AS NODE2_NAME, 'NEXT' AS LABEL),\\n        (SELECT 'Stop2' AS NODE1_NAME, 'Denmark Hill' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Denmark Hill' AS NODE1_NAME, 'Stop2' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop3' AS NODE1_NAME, 'Stop2' AS NODE2_NAME, 'NEXT' AS LABEL),\\n        (SELECT 'Stop3' AS NODE1_NAME, 'Pecham Rye' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop4' AS NODE1_NAME, 'Pecham Rye' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Pecham Rye' AS NODE1_NAME, 'Stop3' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Pecham Rye' AS NODE1_NAME, 'Stop4' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop4' AS NODE1_NAME, 'Stop5' AS NODE2_NAME, 'NEXT' AS LABEL),\\n        (SELECT 'Stop5' AS NODE1_NAME, 'Denmark Hill' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop7' AS NODE1_NAME, 'Denmark Hill' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Denmark Hill' AS NODE1_NAME, 'Stop5' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Denmark Hill' AS NODE1_NAME, 'Stop7' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop7' AS NODE1_NAME, 'Stop6' AS NODE2_NAME, 'NEXT' AS LABEL),\\n        (SELECT 'Stop6' AS NODE1_NAME, 'London Victoria' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'London Victoria' AS NODE1_NAME, 'Stop6' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Stop8' AS NODE1_NAME, 'Stop7' AS NODE2_NAME, 'NEXT' AS LABEL),\\n        (SELECT 'Stop5' AS NODE1_NAME, 'Stop9' AS NODE2_NAME, 'NEXT' AS LABEL),\\n        (SELECT 'Stop9' AS NODE1_NAME, 'Elephant & Castle' AS NODE2_NAME, 'CALLS_AT' AS LABEL),\\n        (SELECT 'Elephant & Castle' AS NODE1_NAME, 'Stop9' AS NODE2_NAME, 'CALLS_AT' AS LABEL)\\n    \\n    ),\\n    OPTIONS => KV_PAIRS( label_delimiter = ':', graph_table = 'tube_graph_table')\\n);\"",
        "previous_block_id": "3a6f11e0-062c-11ef-95c9-a11f8aa13710",
        "next_block_id": "3a71a9f0-062c-11ef-95c9-a11f8aa13710",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-26T14:18:09.634Z",
        "updated_at": "2024-05-06T21:57:29.466Z",
        "worksheetId": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "3a71a9f0-062c-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- How to reach all stations and for Pecham Rye before 11:40 from London Victoria\\n-- See how two QUERY graphs are used and the output of the inner one is joined with original data to set the restrictions on the outer query. \\nDROP TABLE IF EXISTS tubequery;\\nEXECUTE FUNCTION\\nQUERY_GRAPH(\\n    GRAPH => 'tube',\\n    QUERIES => INPUT_TABLES( \\n        (SELECT 'London Victoria' AS NODE_NAME),\\n        (SELECT 'STATION' AS TARGET_NODE_LABEL)\\n    ), \\n    RESTRICTIONS => INPUT_TABLES(        \\n        (SELECT q.QUERY_NODE2_NAME as NODE_NAME, IF(t.departs>time('11:40'),1,0) AS ONOFFCOMPARED \\n            FROM (\\n            QUERY_GRAPH(\\n                GRAPH => 'tube',\\n                QUERIES => INPUT_TABLES( \\n                    (SELECT 'Pecham Rye' AS NODE_NAME)),         \\n                RINGS => 1               \\n            ) as q \\n            INNER JOIN stops as t \\n            ON q.QUERY_NODE2_NAME = t.name)\\n        )\\n    ),\\n    ADJACENCY_TABLE => 'tubequery',\\n    RINGS => 10,\\n    OPTIONS => KV_PAIRS(force_undirected = 'true')\\n);\"",
        "previous_block_id": "3a707170-062c-11ef-95c9-a11f8aa13710",
        "next_block_id": null,
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-26T14:18:17.200Z",
        "updated_at": "2024-05-06T21:57:30.757Z",
        "worksheetId": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "3a73ccd0-062c-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\" MODELING PORTIONS OF THE LONDON SUBWAY (TUBE) FOR CONNECTED TRIPS\",\"bold\":true}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"This example demonstrates the use of query pattern matching and how embedded queries with OLAP functions can be run together.  \"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"It is based on the Neo4j pattern matching example here: https://neo4j.com/docs/cypher-manual/current/patterns/primer/\"}]}]",
        "previous_block_id": null,
        "next_block_id": "3a6f11e0-062c-11ef-95c9-a11f8aa13710",
        "block_type_id": "a9949a1a-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-26T14:20:00.482Z",
        "updated_at": "2024-05-06T21:44:42.942Z",
        "worksheetId": "3a6dd960-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "a9949a1a-14e3-11eb-adc1-0242ac120002"
      }
    ],
    "4589a130-062c-11ef-95c9-a11f8aa13710": [
      {
        "config": {},
        "id": "add99420-062c-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"PROPERTY GRAPHS, GRAPH ONTOLOGIES, and HOP PATTERNS IN QUERIES on a SIMPLE WIKI EXAMPLE \",\"bold\":true}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"Below is a demonstration of how labels are associated with the graph entities and how typical hop based pattern queries can be run.  \"}]}]",
        "previous_block_id": null,
        "next_block_id": "b2e05a30-062c-11ef-95c9-a11f8aa13710",
        "block_type_id": "a9949a1a-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:30:43.682Z",
        "updated_at": "2024-05-06T21:57:05.479Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "a9949a1a-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "b2e05a30-062c-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- Create a table including people, age, interest and gender info\\nCREATE or REPLACE TABLE wiki (name TEXT, age INT, interest TEXT, gender TEXT);\\nINSERT INTO wiki VALUES ('Jane', 40, 'business', 'FEMALE');\\nINSERT INTO wiki VALUES ('Bill', 60, 'golf', 'MALE');\\nINSERT INTO wiki VALUES ('Susan', 22, 'dance', 'FEMALE');\\nINSERT INTO wiki VALUES ('Alex', 34, 'chess', 'MALE');\\nINSERT INTO wiki VALUES ('Tom', 29, 'chess', 'MALE');\"",
        "previous_block_id": "add99420-062c-11ef-95c9-a11f8aa13710",
        "next_block_id": "ff389280-062c-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:30:52.115Z",
        "updated_at": "2024-05-06T21:57:07.033Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "ff389280-062c-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- Create an undirected graph from the table.  \\nCREATE OR REPLACE GRAPH chess (\\n    NODES => INPUT_TABLES(\\n       (SELECT 'Gender' AS LABEL_KEY, Gender AS LABEL from wiki),\\n       (SELECT 'Interest' AS LABEL_KEY, interest AS LABEL from wiki),                \\n       (SELECT name AS NAME, Gender AS LABEL from wiki),\\n       (SELECT name AS NAME, interest AS LABEL from wiki)       \\n    ),\\n    EDGES => INPUT_TABLES(\\n        (SELECT 'Relation' AS LABEL_KEY, 'Friend:Family' AS LABEL),\\n        (SELECT 'Jane' AS NODE1_NAME, 'Bill' AS NODE2_NAME, 'Friend' AS LABEL),\\n        (SELECT 'Bill' AS NODE1_NAME, 'Alex' AS NODE2_NAME, 'Family' AS LABEL),\\n        (SELECT 'Bill' AS NODE1_NAME, 'Susan' AS NODE2_NAME, 'Friend' AS LABEL),\\n        (SELECT 'Susan' AS NODE1_NAME, 'Alex' AS NODE2_NAME, 'Friend' AS LABEL),\\n        (SELECT 'Alex' AS NODE1_NAME, 'Tom' AS NODE2_NAME, 'Friend' AS LABEL)    \\n    ),\\n    OPTIONS => KV_PAIRS( label_delimiter = ':', graph_table = 'chess_graph_table')\\n);\"",
        "previous_block_id": "b2e05a30-062c-11ef-95c9-a11f8aa13710",
        "next_block_id": "36118eb0-062d-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:33:00.200Z",
        "updated_at": "2024-05-06T21:57:08.390Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "36118eb0-062d-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- Another way to use all constant values without reading from tables \\nCREATE OR REPLACE GRAPH chess (\\n    NODES => INPUT_TABLES(\\n        (SELECT 'Gender' AS LABEL_KEY, 'MALE:FEMALE' AS LABEL),\\n        (SELECT 'Interest' AS LABEL_KEY, 'golf:business:dance:chess' AS LABEL),\\n                \\n        (SELECT 'Jane' AS NAME, 'FEMALE:business' AS LABEL),\\n        (SELECT 'Bill' AS NAME, 'MALE:golf' AS LABEL),\\n        (SELECT 'Susan' AS NAME, 'FEMALE:dance' AS LABEL),\\n        (SELECT 'Alex' AS NAME, 'MALE:chess' AS LABEL),\\n        (SELECT 'Tom' AS NAME, 'MALE:chess' AS LABEL)\\n\\n    ),\\n    EDGES => INPUT_TABLES(\\n        (SELECT 'Relation' AS LABEL_KEY, 'Friend:Family' AS LABEL),\\n\\n        (SELECT 'Jane' AS NODE1_NAME, 'Bill' AS NODE2_NAME, 'Friend' AS LABEL),\\n        (SELECT 'Bill' AS NODE1_NAME, 'Alex' AS NODE2_NAME, 'Family' AS LABEL),\\n        (SELECT 'Bill' AS NODE1_NAME, 'Susan' AS NODE2_NAME, 'Friend' AS LABEL),\\n        (SELECT 'Susan' AS NODE1_NAME, 'Alex' AS NODE2_NAME, 'Friend' AS LABEL),\\n        (SELECT 'Alex' AS NODE1_NAME, 'Tom' AS NODE2_NAME, 'Friend' AS LABEL)\\n    \\n    ),\\n    OPTIONS => KV_PAIRS( label_delimiter = ':', graph_table = 'chess_graph_table', is_partitioned = 'false')\\n);\"",
        "previous_block_id": "ff389280-062c-11ef-a8ee-69f2b3d99443",
        "next_block_id": "68ff9510-062d-11ef-95c9-a11f8aa13710",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:34:32.220Z",
        "updated_at": "2024-05-06T21:57:10.046Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "68ff9510-062d-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- We can look at the graph ontology (schema) by suppresing the lable key groupings using ALTER GRAPH options.\\nALTER GRAPH chess MODIFY(\\n    OPTIONS => KV_PAIRS (  graph_table = 'chess_graph_table', export_graph_schema = 'true', schema_node_labelkeys = 'false', schema_edge_labelkeys = 'true', cluster_graph_schema = 'true')\\n)\"",
        "previous_block_id": "36118eb0-062d-11ef-a8ee-69f2b3d99443",
        "next_block_id": "8013c910-062d-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:35:57.665Z",
        "updated_at": "2024-05-06T21:57:10.737Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "78cf6f10-062d-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- Find all paths from FEMALE to chess nodes with constraints and restrictions\\nDROP TABLE IF EXISTS hopquery;\\nDROP TABLE IF EXISTS hopquery_nodes;\\nEXECUTE FUNCTION\\nQUERY_GRAPH(\\n    GRAPH => 'chess',\\n    QUERIES => INPUT_TABLES( \\n        (SELECT 'FEMALE' AS NODE_LABEL),\\n        (SELECT 'chess'  AS TARGET_NODE_LABEL),\\n        (SELECT 2 AS HOP_ID, 'Friend' AS EDGE_LABEL),\\n        (SELECT 1 AS HOP_ID, 'golf'   AS NODE_LABEL),\\n        -- Below pattern is applied for the age property which is not used in the graph generation \\n        -- A good example for the hybrid use of Kinetica Graph with its relational DB\\n        (SELECT 4 AS HOP_ID, name AS NODE_NAME FROM wiki WHERE age = 29)\\n    ),\\n    RESTRICTIONS => INPUT_TABLES(\\n        (SELECT 'Family' AS EDGE_LABEL)\\n        -- Below commented section is to apply a global constraint to the query i.e., regradless of hop levels\\n        -- (SELECT \\n        --   name AS NODE_NAME, \\n        --   IF(age=29,0,1) AS ONOFFCOMPARED \\n        -- FROM Person)\\n    ),\\n    ADJACENCY_TABLE => 'hopquery',\\n    RINGS => 4,\\n    OPTIONS => KV_PAIRS(force_undirected = 'true')\\n);\"",
        "previous_block_id": "8013c910-062d-11ef-a8ee-69f2b3d99443",
        "next_block_id": null,
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:36:24.193Z",
        "updated_at": "2024-05-06T21:57:12.136Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "8013c910-062d-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "{\"node_table_schema\":\"\",\"node_table_name\":\"chess_graph_table_nodes\",\"node_id_column\":\"\",\"node_name_column\":\"NODE_NAME\",\"node_label_column\":\"NODE_LABEL\",\"edge_table_schema\":\"\",\"edge_table_name\":\"chess_graph_table\",\"edge_source_column\":\"EDGE_NODE1_NAME\",\"edge_target_column\":\"EDGE_NODE2_NAME\",\"edge_label_column\":\"EDGE_LABEL\",\"limit\":1000,\"title\":\"\"}",
        "previous_block_id": "68ff9510-062d-11ef-95c9-a11f8aa13710",
        "next_block_id": "78cf6f10-062d-11ef-95c9-a11f8aa13710",
        "block_type_id": "dedd5fd0-5a0a-4eb8-b0d5-cdaeb5b07338",
        "worksheet_id": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:36:36.385Z",
        "updated_at": "2024-04-29T13:37:20.639Z",
        "worksheetId": "4589a130-062c-11ef-95c9-a11f8aa13710",
        "blockTypeId": "dedd5fd0-5a0a-4eb8-b0d5-cdaeb5b07338"
      }
    ],
    "155e0440-062e-11ef-95c9-a11f8aa13710": [
      {
        "config": {},
        "id": "4dfeef30-062e-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "[{\"type\":\"paragraph\",\"children\":[{\"text\":\"DEMO OF PROPERTY GRAPHS WITH FUZZY INPUT TO QUERIES\",\"bold\":true}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"This example demonstrates a property graph including movies, actors and sample information from IMDB.  Relations include people to movies (based on their professions), people to years (based on their year of birth) and movies to years (based on their year of release).\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"It is based on the Neo4j example here: https://github.com/neo4j-graph-examples/recommendations\"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"The query finds the directors and movies related to 'James Spadr' (note the misspelling) in the small sample dataset. The exact input is 'James Spader' but by using the text search ability created over the nodes table of the graph nodes we can find the 'intended' node and do our 2 hop query - all within the query/graph. \"}]},{\"type\":\"paragraph\",\"children\":[{\"text\":\"We also demostrate modifying an existing graph by adding 'Star Gate' movie and relevant info. \"}]}]",
        "previous_block_id": null,
        "next_block_id": "55269970-062e-11ef-95c9-a11f8aa13710",
        "block_type_id": "a9949a1a-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:42:21.859Z",
        "updated_at": "2024-05-06T22:07:27.441Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "a9949a1a-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "55269970-062e-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"CREATE or REPLACE TABLE actors (name VARCHAR(64), age INT, profession VARCHAR(64), born INT);\\nINSERT INTO actors (name, age, profession, born) VALUES\\n('Robert de Niro',81,'actor:director',1943),\\n('Jean Reno',84,'actor:director',1948),\\n('Al Pacino',82,'actor:producer',1940),\\n('Michael Douglas',80,'actor:producer',1944),\\n('James Spader',64,'actor',1960),\\n('Katherina Witt',59, 'actor',1965),\\n('Oliver Stone',77, 'director',1946);\\n\\nCREATE or REPLACE TABLE movies (title VARCHAR(64), score FLOAT, genre VARCHAR(64), released INT);\\nINSERT INTO movies (title, score, genre, released) VALUES \\n('Wall Street', 8.4, 'thriller',1987),\\n('Ronin', 7.2, 'action',1998),\\n('God Father', 9.1, 'drama:thriller',1972),\\n('Salome',6.3,'drama',2013);\\n\\nCREATE or REPLACE TABLE imdb (person VARCHAR(64), film VARCHAR(64), participation VARCHAR(64));\\nINSERT INTO imdb (person, film, participation) VALUES \\n('Robert de Niro','God Father','acted'),\\n('Robert de Niro','Ronin','acted'),\\n('Jean Reno','Ronin','acted'),\\n('Al Pacino','God Father','acted'),\\n('Michael Douglas','Wall Street','acted'),\\n('James Spader','Wall Street','acted'),\\n('Katherina Witt','Ronin','acted'),\\n('Al Pacino','Salome','acted:directed'),\\n('Oliver Stone', 'Wall Street', 'directed');\"",
        "previous_block_id": "4dfeef30-062e-11ef-95c9-a11f8aa13710",
        "next_block_id": "f5bdbe90-062e-11ef-95c9-a11f8aa13710",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:42:33.863Z",
        "updated_at": "2024-05-06T21:56:45.907Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "f5bdbe90-062e-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"CREATE or REPLACE DIRECTED GRAPH movie (\\n    NODES => INPUT_TABLES(\\n       (SELECT distinct genre AS LABEL, 'genre' AS LABEL_KEY FROM movies),           \\n       (SELECT\\n           title as NAME,\\n           CONCAT(genre,':MOVIE') as LABEL \\n         FROM\\n\\t   movies),\\n       (SELECT distinct profession AS LABEL, 'profession' AS LABEL_KEY FROM actors),\\n       (SELECT\\n            name as NAME,\\n            CONCAT(profession,':PEOPLE') as LABEL\\n        FROM\\n        actors),        \\n         (SELECT distinct CHAR64(born) AS NAME, CHAR64('year') AS LABEL FROM actors),\\n         (SELECT distinct CHAR64(released) AS NAME, CHAR64('year') AS LABEL FROM movies)\\n   ),\\n   edges => INPUT_TABLES(\\n      (SELECT distinct participation AS LABEL, 'participation' AS LABEL_KEY FROM imdb),\\n\\n      (SELECT\\n           person as NODE1_NAME,\\n           film   as NODE2_NAME,           \\n           participation as LABEL\\n       FROM imdb),\\n       \\n       (SELECT\\n           title as NODE1_NAME,\\n           CHAR64(released)  as NODE2_NAME,           \\n           CHAR64('released') as LABEL\\n       FROM movies),\\n\\n       (SELECT\\n           name as NODE1_NAME,\\n           CHAR64(born)  as NODE2_NAME,           \\n           CHAR64('born') as LABEL\\n       FROM actors)\\n\\n   ),\\n   OPTIONS => KV_PAIRS( graph_table = 'movie_graph_table', label_delimiter = ':')\\n);\"",
        "previous_block_id": "55269970-062e-11ef-95c9-a11f8aa13710",
        "next_block_id": "27093880-062f-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:47:03.289Z",
        "updated_at": "2024-05-06T21:56:47.206Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "27093880-062f-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"ALTER GRAPH movie MODIFY (\\n    NODES => INPUT_TABLES( \\n      (SELECT 'scifi' AS LABEL, 'genre' AS LABEL_KEY), \\n      (SELECT 'Star Gate' AS NAME, 'scifi' AS LABEL),\\n       (SELECT 'Star Gate' AS NAME, 'MOVIE' AS LABEL),     \\n      (SELECT 'Roland Emerich' AS NAME, 'director' AS LABEL),\\n      (SELECT 'Roland Emerich' AS NAME, 'PEOPLE' AS LABEL),\\n      (SELECT '1994' AS NAME, 'year' AS LABEL)\\n    ),\\n    EDGES => INPUT_TABLES(\\n        (SELECT 'James Spader' AS NODE1_NAME, 'Star Gate' AS NODE2_NAME, 'acted' AS LABEL),\\n        (SELECT 'Star Gate' AS NODE1_NAME, '1994' AS NODE2_NAME, 'released' AS LABEL),\\n        (SELECT 'Roland Emerich' AS NODE1_NAME, 'Star Gate' AS NODE2_NAME, 'directed' AS LABEL)\\n    ),\\n     OPTIONS => KV_PAIRS( graph_table = 'movie_graph_table')\\n);\\n\\nINSERT INTO movies (title, score, genre, released) VALUES \\n('Star Gate', 7.0, 'scifi', 1994);\"",
        "previous_block_id": "f5bdbe90-062e-11ef-95c9-a11f8aa13710",
        "next_block_id": "40bd1da0-062f-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:48:25.992Z",
        "updated_at": "2024-05-06T21:56:48.560Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "40bd1da0-062f-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "{\"node_table_schema\":\"\",\"node_table_name\":\"movie_graph_table_nodes\",\"node_id_column\":\"\",\"node_name_column\":\"NODE_NAME\",\"node_label_column\":\"NODE_LABEL\",\"edge_table_schema\":\"\",\"edge_table_name\":\"movie_graph_table\",\"edge_source_column\":\"EDGE_NODE1_NAME\",\"edge_target_column\":\"EDGE_NODE2_NAME\",\"edge_label_column\":\"EDGE_LABEL\",\"limit\":1000,\"title\":\"MOVIES\"}",
        "previous_block_id": "27093880-062f-11ef-a8ee-69f2b3d99443",
        "next_block_id": "87e344b0-0630-11ef-95c9-a11f8aa13710",
        "block_type_id": "dedd5fd0-5a0a-4eb8-b0d5-cdaeb5b07338",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:49:09.114Z",
        "updated_at": "2024-04-29T13:58:18.187Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "dedd5fd0-5a0a-4eb8-b0d5-cdaeb5b07338"
      },
      {
        "config": {},
        "id": "87e344b0-0630-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- Who directed the movies in which James Spader acted?\\n-- MATCH (james {name: 'James Spader'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director)\\n-- RETURN movie.title, director.name\\nDROP TABLE IF EXISTS movie_query;\\nDROP TABLE IF EXISTS movie_query_nodes;\\nEXECUTE FUNCTION\\nQUERY_GRAPH(\\n  GRAPH => 'movie',\\n  QUERIES => INPUT_TABLES(\\n      (SELECT 'James Spader'           AS NODE_NAME),     \\n      (SELECT  1 AS HOP_ID, 'acted'    AS  EDGE_LABEL),\\n      (SELECT  1 AS HOP_ID, 'MOVIE'    AS  NODE_LABEL),     \\n      (SELECT -2 AS HOP_ID, 'director' AS  NODE_LABEL),\\n      (SELECT  2 AS HOP_ID, 'directed' AS  EDGE_LABEL)\\n  ),\\n  ADJACENCY_TABLE => 'movie_query',\\n  RINGS => 2,\\n  OPTIONS => KV_PAIRS(\\n     force_undirected = 'true', \\n     result_table_index = '1'\\n    )\\n );\"",
        "previous_block_id": "40bd1da0-062f-11ef-a8ee-69f2b3d99443",
        "next_block_id": "95ee5ce0-0633-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T13:58:17.979Z",
        "updated_at": "2024-05-06T21:56:50.315Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "95ee5ce0-0633-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"SELECT * FROM movie_query_nodes;\"",
        "previous_block_id": "87e344b0-0630-11ef-95c9-a11f8aa13710",
        "next_block_id": "a4b9e640-0633-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T14:20:10.030Z",
        "updated_at": "2024-05-06T21:56:50.764Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "a4b9e640-0633-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"ALTER TABLE movie_graph_table_nodes \\nMODIFY NODE_NAME VARCHAR(TEXT_SEARCH, DISK_OPTIMIZED)\"",
        "previous_block_id": "95ee5ce0-0633-11ef-a8ee-69f2b3d99443",
        "next_block_id": "ab5e56c0-0633-11ef-a8ee-69f2b3d99443",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T14:20:34.852Z",
        "updated_at": "2024-05-06T21:56:51.367Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "ab5e56c0-0633-11ef-a8ee-69f2b3d99443",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- Fuzzy search using an incorrect spelling (James Spdar)\\nSELECT * FROM\\n--EXECUTE FUNCTION\\nQUERY_GRAPH(\\n  GRAPH => 'movie',\\n  QUERIES => INPUT_TABLES(\\n      (SELECT NODE_NAME AS NODE_NAME\\n       FROM TABLE(\\n         FILTER_BY_STRING(\\n         TABLE_NAME => INPUT_TABLE(movie_graph_table_nodes),\\n         --COLUMN_NAMES => 'QUERY_NODE2_NAME',\\n         MODE => 'search',\\n         EXPRESSION => 'James Spdar'\\n      ))),\\n      --(SELECT  'James Spader' AS NODE_NAME),\\n      (SELECT  1 AS  HOP_ID, 'acted'    AS   EDGE_LABEL), -- [:acted]\\n      (SELECT  1 AS  HOP_ID, 'MOVIE'    AS   NODE_LABEL), -- (movie:MOVIE ...\\n      (SELECT  1 AS  HOP_ID,  title     AS   NODE_NAME FROM movies WHERE genre = 'thriller'), -- (...{genre : thriller}..)\\n      (SELECT -2 AS  HOP_ID, 'directed' AS   EDGE_LABEL), -- [:directed]\\n      (SELECT  2 AS  HOP_ID, 'director' AS   NODE_LABEL )  -- (p:director)\\n  ),\\n  --ADJACENCY_TABLE =>  'movie_query', \\n  RINGS => 2,\\n  OPTIONS => KV_PAIRS(      \\n       result_table_index = '1')\\n );\"",
        "previous_block_id": "a4b9e640-0633-11ef-a8ee-69f2b3d99443",
        "next_block_id": "d9831540-0633-11ef-95c9-a11f8aa13710",
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T14:20:45.996Z",
        "updated_at": "2024-05-06T21:56:52.407Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      },
      {
        "config": {},
        "id": "d9831540-0633-11ef-95c9-a11f8aa13710",
        "name": "Block",
        "description": "Description for Block",
        "content": "\"-- They use of query/graph as a TABLE function and how to retrieve the output of one QUERY into another as input \\n-- the final required values of the Cypher equivalent query are peeled using the OLAP join with the original Actors tables\\n-- Equivalent Cypher Query:\\n-- MATCH (movie : MOVIE {title: 'Wall Street'}) <-[:acted]- (actor) -> [:born] ( y :year))\\n-- RETURN actor.name, actor.age, y.year\\nSELECT a.name, a.age, h2.QUERY_NODE2_NAME FROM\\n   QUERY_GRAPH(\\n        GRAPH => 'movie',\\n        QUERIES => INPUT_TABLES(\\n            (SELECT QUERY_NODE_NAME_TARGET as NODE_NAME\\n             FROM  QUERY_GRAPH(\\n                    GRAPH => 'movie',\\n                    QUERIES => INPUT_TABLES(\\n                        (SELECT 'Wall Street' AS NODE_NAME),\\n                        (SELECT -1 AS HOP_ID, 'acted' AS  EDGE_LABEL)       \\n                    ),\\n                    RINGS => 1,\\n                    OPTIONS => KV_PAIRS( result_table_index = '2'))  \\n            ),\\n            (SELECT 'year'  AS TARGET_NODE_LABEL),\\n            (SELECT  1 AS HOP_ID, 'born' AS  EDGE_LABEL)\\n        ),\\n        RINGS => 1,\\n        OPTIONS => KV_PAIRS( result_table_index = '1')  \\n   )  \\n   as h2\\nINNER JOIN Actors AS a\\nON h2.QUERY_NODE1_NAME = a.name\"",
        "previous_block_id": "ab5e56c0-0633-11ef-a8ee-69f2b3d99443",
        "next_block_id": null,
        "block_type_id": "84b9233c-14e3-11eb-adc1-0242ac120002",
        "worksheet_id": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "created_at": "2024-04-29T14:22:03.413Z",
        "updated_at": "2024-05-06T21:56:53.687Z",
        "worksheetId": "155e0440-062e-11ef-95c9-a11f8aa13710",
        "blockTypeId": "84b9233c-14e3-11eb-adc1-0242ac120002"
      }
    ]
  },
  "vizMap": {
    "3a6f11e0-062c-11ef-95c9-a11f8aa13710": [],
    "3a707170-062c-11ef-95c9-a11f8aa13710": [],
    "3a71a9f0-062c-11ef-95c9-a11f8aa13710": [
      {
        "config": {
          "type": "graph"
        },
        "id": "3a72bb60-062c-11ef-95c9-a11f8aa13710",
        "name": "Graph Visualization",
        "description": "Description for graph visualization",
        "block_id": "3a71a9f0-062c-11ef-95c9-a11f8aa13710",
        "visualization_type_id": "278540bd-cd50-4f78-871b-65b94001dfee",
        "created_at": "2024-04-26T22:15:47.889Z",
        "updated_at": "2024-04-29T13:27:30.070Z",
        "blockId": "3a71a9f0-062c-11ef-95c9-a11f8aa13710",
        "visualizationTypeId": "278540bd-cd50-4f78-871b-65b94001dfee"
      }
    ],
    "3a73ccd0-062c-11ef-95c9-a11f8aa13710": [],
    "add99420-062c-11ef-95c9-a11f8aa13710": [],
    "b2e05a30-062c-11ef-95c9-a11f8aa13710": [],
    "ff389280-062c-11ef-a8ee-69f2b3d99443": [],
    "36118eb0-062d-11ef-a8ee-69f2b3d99443": [],
    "68ff9510-062d-11ef-95c9-a11f8aa13710": [],
    "78cf6f10-062d-11ef-95c9-a11f8aa13710": [
      {
        "config": {
          "type": "graph"
        },
        "id": "20e9eff0-0bf5-11ef-bd89-172926c8ff0a",
        "name": "Graph Visualization",
        "description": "Description for graph visualization",
        "block_id": "78cf6f10-062d-11ef-95c9-a11f8aa13710",
        "visualization_type_id": "278540bd-cd50-4f78-871b-65b94001dfee",
        "created_at": "2024-05-06T22:08:11.887Z",
        "updated_at": "2024-05-06T22:08:11.887Z",
        "blockId": "78cf6f10-062d-11ef-95c9-a11f8aa13710",
        "visualizationTypeId": "278540bd-cd50-4f78-871b-65b94001dfee"
      }
    ],
    "8013c910-062d-11ef-a8ee-69f2b3d99443": [],
    "4dfeef30-062e-11ef-95c9-a11f8aa13710": [],
    "55269970-062e-11ef-95c9-a11f8aa13710": [],
    "f5bdbe90-062e-11ef-95c9-a11f8aa13710": [],
    "27093880-062f-11ef-a8ee-69f2b3d99443": [],
    "40bd1da0-062f-11ef-a8ee-69f2b3d99443": [],
    "87e344b0-0630-11ef-95c9-a11f8aa13710": [],
    "95ee5ce0-0633-11ef-a8ee-69f2b3d99443": [],
    "a4b9e640-0633-11ef-a8ee-69f2b3d99443": [],
    "ab5e56c0-0633-11ef-a8ee-69f2b3d99443": [],
    "d9831540-0633-11ef-95c9-a11f8aa13710": []
  }
}
